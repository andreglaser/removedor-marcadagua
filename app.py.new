import os
import cv2
import numpy as np
from PIL import Image
import requests
import base64
import logging
import traceback
import json
import sys
from io import BytesIO
from flask import Flask, request, jsonify, render_template, send_file, redirect
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger('watermark-remover')

load_dotenv()

# Chave da API do ImgBB
IMGBB_API_KEY = os.environ.get('IMGBB_API_KEY', '755ab7dc4f57880bb1322fca5b572c57')
logger.info(f"IMGBB_API_KEY configurada: {'*****' + IMGBB_API_KEY[-4:] if IMGBB_API_KEY else 'Não configurada'}")

app = Flask(__name__)

# Texto da marca d'água a ser removida
WATERMARK_TEXT = "ESSA EMISSÃO FOI LOCALIZADA PELA EQUIPE DE ESPECIALISTAS DO @ALERTADEVOOS"

# Função para remover a marca d'água
def remove_watermark(image):
    logger.info(f"Iniciando remoção de marca d'água. Tamanho da imagem: {image.width}x{image.height}")
    try:
        # Converter a imagem para o formato OpenCV
        img_np = np.array(image)
        img_cv = cv2.cvtColor(img_np, cv2.COLOR_RGB2BGR)
        
        # Converter para HSV para facilitar a detecção da cor vermelha
        hsv = cv2.cvtColor(img_cv, cv2.COLOR_BGR2HSV)
        
        # Definir faixa para a cor vermelha (a marca d'água é vermelha)
        # Vermelho em HSV pode estar em dois intervalos
        lower_red1 = np.array([0, 100, 100])
        upper_red1 = np.array([10, 255, 255])
        lower_red2 = np.array([160, 100, 100])
        upper_red2 = np.array([180, 255, 255])
        
        # Criar máscaras para as duas faixas de vermelho
        mask1 = cv2.inRange(hsv, lower_red1, upper_red1)
        mask2 = cv2.inRange(hsv, lower_red2, upper_red2)
        
        # Combinar as máscaras
        mask = mask1 + mask2
        
        # Encontrar contornos na máscara
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        logger.info(f"Encontrados {len(contours)} contornos na imagem")
        
        # Se encontrarmos contornos, vamos procurar por um que possa ser a marca d'água
        if contours:
            # Ordenar contornos por área (do maior para o menor)
            contours = sorted(contours, key=cv2.contourArea, reverse=True)
            
            for i, contour in enumerate(contours):
                # Obter o retângulo que envolve o contorno
                x, y, w, h = cv2.boundingRect(contour)
                
                # Se o retângulo for largo e fino, provavelmente é a marca d'água
                if w > image.width * 0.5 and h < image.height * 0.2:
                    logger.info(f"Contorno {i+1} identificado como marca d'água: x={x}, y={y}, w={w}, h={h}")
                    # Criar uma máscara para esta região
                    region_mask = np.zeros_like(mask)
                    cv2.drawContours(region_mask, [contour], 0, 255, -1)
                    
                    # Preencher a região com a cor do fundo (branco neste caso)
                    img_cv[region_mask == 255] = [255, 255, 255]
                    logger.info("Marca d'água removida com sucesso")
                    break
                else:
                    logger.debug(f"Contorno {i+1} não é marca d'água: x={x}, y={y}, w={w}, h={h}")
        else:
            logger.warning("Nenhum contorno encontrado na imagem. Possível que não haja marca d'água.")
        
        # Converter de volta para RGB
        result_img = cv2.cvtColor(img_cv, cv2.COLOR_BGR2RGB)
        return Image.fromarray(result_img)
    except Exception as e:
        logger.error(f"Erro ao remover marca d'água: {str(e)}")
        logger.error(traceback.format_exc())
        raise

# Função para fazer upload de imagem para o ImgBB
def upload_to_imgbb(image):
    logger.info("Iniciando upload para o ImgBB")
    try:
        # Salvar a imagem em um buffer
        buffer = BytesIO()
        image.save(buffer, format="PNG")
        buffer.seek(0)
        
        # Converter para base64
        img_str = base64.b64encode(buffer.getvalue())
        logger.debug(f"Imagem convertida para base64. Tamanho: {len(img_str)} bytes")
        
        # Fazer upload para o ImgBB
        url = "https://api.imgbb.com/1/upload"
        payload = {
            "key": IMGBB_API_KEY,
            "image": img_str,
            "name": "processed_image",
        }
        
        logger.info("Enviando requisição para o ImgBB API")
        response = requests.post(url, payload)
        logger.debug(f"Resposta do ImgBB - Status: {response.status_code}")
        
        if response.status_code != 200:
            logger.error(f"Erro na resposta do ImgBB: {response.text}")
            raise Exception(f"ImgBB API retornou status {response.status_code}: {response.text}")
        
        try:
            data = response.json()
            logger.debug(f"Resposta JSON do ImgBB: {json.dumps(data)}")
        except json.JSONDecodeError as e:
            logger.error(f"Erro ao decodificar JSON da resposta: {str(e)}")
            logger.error(f"Conteúdo da resposta: {response.text}")
            raise Exception(f"Erro ao decodificar resposta do ImgBB: {str(e)}")
        
        if data.get("success"):
            logger.info(f"Upload para ImgBB bem-sucedido. URL: {data['data']['url']}")
            return data["data"]["url"], data["data"]["display_url"]
        else:
            logger.error(f"Falha no upload para ImgBB: {json.dumps(data)}")
            raise Exception("Falha ao fazer upload para o ImgBB: " + str(data))
    except Exception as e:
        logger.error(f"Erro no upload para ImgBB: {str(e)}")
        logger.error(traceback.format_exc())
        raise

@app.route('/')
def index():
    logger.info("Acesso à página inicial")
    return render_template('index.html')

@app.route('/remove-watermark', methods=['POST'])
def process_image():
    logger.info(f"Recebida requisição para remover marca d'água. Content-Type: {request.content_type}")
    try:
        upload_to_imgbb_enabled = request.form.get('upload_to_imgbb') == 'true'
        logger.info(f"Upload para ImgBB habilitado: {upload_to_imgbb_enabled}")
        
        if 'image' in request.files:
            logger.info("Processando upload de arquivo")
            # Processar upload de arquivo
            file = request.files['image']
            logger.info(f"Arquivo recebido: {file.filename}, Content-Type: {file.content_type}")
            
            try:
                img = Image.open(file)
                logger.info(f"Imagem aberta com sucesso. Tamanho: {img.width}x{img.height}, Formato: {img.format}")
                processed_img = remove_watermark(img)
                
                if upload_to_imgbb_enabled:
                    try:
                        # Fazer upload para o ImgBB
                        url, display_url = upload_to_imgbb(processed_img)
                        response_data = {
                            'success': True,
                            'url': url,
                            'display_url': display_url
                        }
                        logger.info(f"Retornando resposta de sucesso com URL: {url}")
                        return jsonify(response_data)
                    except Exception as e:
                        logger.error(f"Erro ao fazer upload para ImgBB: {str(e)}")
                        return jsonify({'error': str(e)}), 500
                else:
                    # Salvar a imagem processada temporariamente
                    logger.info("Preparando imagem para download direto")
                    output = BytesIO()
                    processed_img.save(output, format='PNG')
                    output.seek(0)
                    
                    logger.info("Enviando arquivo para download")
                    return send_file(output, mimetype='image/png', as_attachment=True, download_name='processed_image.png')
            except Exception as e:
                logger.error(f"Erro ao processar imagem: {str(e)}")
                logger.error(traceback.format_exc())
                return jsonify({'error': f"Erro ao processar imagem: {str(e)}"}), 500
        
        elif request.is_json and 'url' in request.json:
            logger.info("Processando URL da imagem")
            # Processar URL da imagem
            image_url = request.json['url']
            logger.info(f"URL da imagem: {image_url}")
            upload_to_imgbb_enabled = request.json.get('upload_to_imgbb', False)
            logger.info(f"Upload para ImgBB habilitado: {upload_to_imgbb_enabled}")
            
            try:
                logger.info("Baixando imagem da URL")
                response = requests.get(image_url)
                if response.status_code != 200:
                    logger.error(f"Erro ao baixar imagem. Status: {response.status_code}, Resposta: {response.text}")
                    return jsonify({'error': f"Erro ao baixar imagem. Status: {response.status_code}"}), 500
                
                logger.info("Imagem baixada com sucesso")
                img = Image.open(BytesIO(response.content))
                logger.info(f"Imagem aberta com sucesso. Tamanho: {img.width}x{img.height}, Formato: {img.format}")
                processed_img = remove_watermark(img)
                
                if upload_to_imgbb_enabled:
                    try:
                        # Fazer upload para o ImgBB
                        url, display_url = upload_to_imgbb(processed_img)
                        response_data = {
                            'success': True,
                            'url': url,
                            'display_url': display_url
                        }
                        logger.info(f"Retornando resposta de sucesso com URL: {url}")
                        return jsonify(response_data)
                    except Exception as e:
                        logger.error(f"Erro ao fazer upload para ImgBB: {str(e)}")
                        return jsonify({'error': str(e)}), 500
                else:
                    # Salvar a imagem processada temporariamente
                    logger.info("Preparando imagem para retorno em base64")
                    output = BytesIO()
                    processed_img.save(output, format='PNG')
                    output.seek(0)
                    
                    # Converter para base64 para retornar como JSON
                    img_str = base64.b64encode(output.getvalue()).decode('utf-8')
                    logger.info(f"Imagem convertida para base64. Tamanho: {len(img_str)} caracteres")
                    
                    return jsonify({
                        'success': True,
                        'image': img_str
                    })
            except Exception as e:
                logger.error(f"Erro ao processar imagem da URL: {str(e)}")
                logger.error(traceback.format_exc())
                return jsonify({'error': f"Erro ao processar imagem da URL: {str(e)}"}), 500
        else:
            logger.warning("Requisição inválida: nem arquivo nem URL fornecidos")
            logger.debug(f"Form data: {request.form}")
            logger.debug(f"JSON data: {request.get_json(silent=True)}")
            logger.debug(f"Files: {request.files}")
            return jsonify({'error': 'No image provided'}), 400
    except Exception as e:
        logger.error(f"Erro não tratado: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({'error': f"Erro interno do servidor: {str(e)}"}), 500

@app.route('/api/remove-watermark', methods=['POST'])
def api_remove_watermark():
    logger.info("Recebida requisição para API remove-watermark")
    if not request.is_json:
        logger.warning(f"Requisição inválida: não é JSON. Content-Type: {request.content_type}")
        return jsonify({'error': 'Request must be JSON'}), 400
        
    if 'url' not in request.json:
        logger.warning("Requisição inválida: URL da imagem não fornecida")
        return jsonify({'error': 'Image URL is required'}), 400
    
    # Verificar se deve fazer upload para o ImgBB
    upload_to_imgbb_enabled = request.json.get('upload_to_imgbb', True)
    logger.info(f"Upload para ImgBB habilitado: {upload_to_imgbb_enabled}")
    
    try:
        # Obter a imagem da URL
        image_url = request.json['url']
        logger.info(f"URL da imagem: {image_url}")
        
        logger.info("Baixando imagem da URL")
        response = requests.get(image_url)
        if response.status_code != 200:
            logger.error(f"Erro ao baixar imagem. Status: {response.status_code}")
            return jsonify({'error': f"Erro ao baixar imagem. Status: {response.status_code}"}), 500
        
        logger.info("Imagem baixada com sucesso")
        img = Image.open(BytesIO(response.content))
        logger.info(f"Imagem aberta com sucesso. Tamanho: {img.width}x{img.height}, Formato: {img.format}")
        
        # Processar a imagem
        processed_img = remove_watermark(img)
        
        if upload_to_imgbb_enabled:
            try:
                # Fazer upload para o ImgBB
                url, display_url = upload_to_imgbb(processed_img)
                response_data = {
                    'success': True,
                    'url': url,
                    'display_url': display_url
                }
                logger.info(f"Retornando resposta de sucesso com URL: {url}")
                return jsonify(response_data)
            except Exception as e:
                logger.error(f"Erro ao fazer upload para ImgBB: {str(e)}")
                return jsonify({'error': str(e)}), 500
        else:
            # Salvar a imagem processada temporariamente
            logger.info("Preparando imagem para retorno em base64")
            output = BytesIO()
            processed_img.save(output, format='PNG')
            output.seek(0)
            
            # Converter para base64 para retornar como JSON
            img_str = base64.b64encode(output.getvalue()).decode('utf-8')
            logger.info(f"Imagem convertida para base64. Tamanho: {len(img_str)} caracteres")
            
            return jsonify({
                'success': True,
                'image': img_str
            })
    except Exception as e:
        logger.error(f"Erro ao processar imagem: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"Iniciando servidor na porta {port}")
    app.run(host='0.0.0.0', port=port, debug=False)